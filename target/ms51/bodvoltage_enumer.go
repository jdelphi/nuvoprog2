// Code generated by "enumer -type=BODVoltage -trimprefix=BODVoltage -transform=snake -json -text"; DO NOT EDIT

package ms51

import (
	"encoding/json"
	"fmt"
)

const _BODVoltageName = "4v43v72v72v2"

var _BODVoltageIndex = [...]uint8{0, 3, 6, 9, 12}

func (i BODVoltage) String() string {
	if i >= BODVoltage(len(_BODVoltageIndex)-1) {
		return fmt.Sprintf("BODVoltage(%d)", i)
	}
	return _BODVoltageName[_BODVoltageIndex[i]:_BODVoltageIndex[i+1]]
}

var _BODVoltageValues = []BODVoltage{0, 1, 2, 3}

var _BODVoltageNameToValueMap = map[string]BODVoltage{
	_BODVoltageName[0:3]:  0,
	_BODVoltageName[3:6]:  1,
	_BODVoltageName[6:9]:  2,
	_BODVoltageName[9:12]: 3,
}

// BODVoltageString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BODVoltageString(s string) (BODVoltage, error) {
	if val, ok := _BODVoltageNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BODVoltage values", s)
}

// BODVoltageValues returns all values of the enum
func BODVoltageValues() []BODVoltage {
	return _BODVoltageValues
}

// IsABODVoltage returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BODVoltage) IsABODVoltage() bool {
	for _, v := range _BODVoltageValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for BODVoltage
func (i BODVoltage) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for BODVoltage
func (i *BODVoltage) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("BODVoltage should be a string, got %s", data)
	}

	var err error
	*i, err = BODVoltageString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for BODVoltage
func (i BODVoltage) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for BODVoltage
func (i *BODVoltage) UnmarshalText(text []byte) error {
	var err error
	*i, err = BODVoltageString(string(text))
	return err
}
