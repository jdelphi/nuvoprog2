// Code generated by "enumer -type=MS51FBLDROMSize -trimprefix=MS51FBLDROM -transform=snake -json -text"; DO NOT EDIT

package ms51

import (
	"encoding/json"
	"fmt"
)

const _MS51FBLDROMSizeName = "0kb1kb2kb3kb4kb"

var _MS51FBLDROMSizeIndex = [...]uint8{0, 3, 6, 9, 12, 15}

func (i MS51FBLDROMSize) String() string {
	if i >= MS51FBLDROMSize(len(_MS51FBLDROMSizeIndex)-1) {
		return fmt.Sprintf("MS51FBLDROMSize(%d)", i)
	}
	return _MS51FBLDROMSizeName[_MS51FBLDROMSizeIndex[i]:_MS51FBLDROMSizeIndex[i+1]]
}

var _MS51FBLDROMSizeValues = []MS51FBLDROMSize{0, 1, 2, 3, 4}

var _MS51FBLDROMSizeNameToValueMap = map[string]MS51FBLDROMSize{
	_MS51FBLDROMSizeName[0:3]:   0,
	_MS51FBLDROMSizeName[3:6]:   1,
	_MS51FBLDROMSizeName[6:9]:   2,
	_MS51FBLDROMSizeName[9:12]:  3,
	_MS51FBLDROMSizeName[12:15]: 4,
}

// MS51FBLDROMSizeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MS51FBLDROMSizeString(s string) (MS51FBLDROMSize, error) {
	if val, ok := _MS51FBLDROMSizeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MS51FBLDROMSize values", s)
}

// MS51FBLDROMSizeValues returns all values of the enum
func MS51FBLDROMSizeValues() []MS51FBLDROMSize {
	return _MS51FBLDROMSizeValues
}

// IsAMS51FBLDROMSize returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MS51FBLDROMSize) IsAMS51FBLDROMSize() bool {
	for _, v := range _MS51FBLDROMSizeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MS51FBLDROMSize
func (i MS51FBLDROMSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MS51FBLDROMSize
func (i *MS51FBLDROMSize) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MS51FBLDROMSize should be a string, got %s", data)
	}

	var err error
	*i, err = MS51FBLDROMSizeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for MS51FBLDROMSize
func (i MS51FBLDROMSize) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for MS51FBLDROMSize
func (i *MS51FBLDROMSize) UnmarshalText(text []byte) error {
	var err error
	*i, err = MS51FBLDROMSizeString(string(text))
	return err
}
